#+title:    ASP.NET Core MVC Identity Framework
#+author:   h4ss4n
#+date:     <2022-06-11 sÃ¡b.>

* Using Visual Studio 2022

** Login and Registration

1) Install a Nugget Package

   Install-Package Microsoft.VisualStudio.Web.CodeGeneration.Design

2) In the base project, Right Click > Add > New Scaffolded Item

   a. In the pop-up window left side select 'Identity' and in the right also 'Identity' and Add.

   b. In the next pop-up window on the top to select an existing layout page, click on the '...' button
      - On left side in Views > Shared select on the right side '_Layout.cshtml' and Ok.

   c. Select the checkboxes for features to add, for example: Account\Login, Account\Logout and Account\Register

   d. In the bottom the 'Data context class' is use to access our database, click on the '+' button
      - Rename with a shorter name like MockIdentityDbContext and click on Add.

   e. For the user class, click on the '+' button
      - Rename with a shorter name like MockIdentityUser and click on Add.

   f. Click on Add.

3) To enable the 'Register' and 'Login' on the top right, open in Solution Explorer the folder Views > Shared > _Layout.cshtml and before the last lines of the header add:

#+begin_src html

                ...
                ...
                <partial name="_LoginPartial" />
            </div>
        </nav>
    </header>

#+end_src

1) To fix the link to the Register page add to Program.cs the snippet

   #+begin_src csharp

    ...
    ...
    app.MapRazorPages();

    app.Run();

   #+end_src

2) To add more field on the Register page, open in Solution Explorer the folder Areas > Identity > Data > MockIdentityUser.cs

#+begin_src csharp

    public class MockIdentityUser : IdentityUser
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

#+end_src

    Then to configure the new fields in the database, open in Solution Explorer the folder Areas > Identity > Data > MockIdentityDbContext

#+begin_src csharp

    protected override void OnModelCreating(ModelBuilder builder)
    {
        ...
        ...
        builder.ApplyConfiguration(new AppUserEntityConfiguration());
    }

#+end_src

    Also we create the class and add the mandatory objects by Ctrl + . (or rigth click) and select in the bulb 'Implement missing members' to generate the content

#+begin_src csharp

    public class AppUserEntityConfiguration : IEntityTypeConfiguration<MockIdentityUser>
    {
        // Below the content generated
        public void Configure(EntityTypeBuilder<MockIdentityUser> builder)
        {
            // This input in manually enter
            builder.Property(x => x.FirstName).HasMaxLength(255);
            builder.Property(x => x.LastName).HasMaxLength(255);
        }
    }

#+end_src

    Once we have our entity configuration set, we can create a database.

    #+begin_quote

    Configuration for existing database

    #+end_quote

6) Check in Solution Explorer the file 'appsettings.json' for the connection string

    #+begin_quote

    Configuration for existing database

    #+end_quote

7) To add and display additional fields in the page, first we need to change our input model, open in Solution Explorer the folder Areas > Identity > Pages > Account > Register.cshtml > Register.cshtml.cs

   #+begin_src csharp

    ...
    ...
    public class InputModel
    {
        [Required]
        [StringLength(255, ErrorMessage = "The first name field should have a maximum of 255 characters")]
        [Display(Name ="Firstname")]
        public string FirstName { get; set; }

        [Required]
        [StringLength(255, ErrorMessage = "The last name field should have a maximum of 255 characters")]
        [Display(Name = "Lastname")]
        public string LastName { get; set; }
        ...
        ...

    ...
    ...
    public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl ??= Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = CreateUser();

                user.FirstName = Input.FirstName;
                user.LastName = Input.LastName;

            ...
            ...

   #+end_src

    Add on the Register.cshtml

    #+begin_src html

    ...
    ...
    <div class="row">
    <div class="col-md-4">
        <form id="registerForm" asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating">
                <input asp-for="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" />
                <label asp-for="Input.FirstName"></label>
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input asp-for="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" />
                <label asp-for="Input.LastName"></label>
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>
        ...
        ...

    #+end_src

8) 

Note: 

- When first run VS2022 it will prompt something about security issues, click in Accept, Yes, etc.

- In VS2022, when debugging (F5) a terminal/console appears and you hace to close it manually.

To automatically close the console when debugging stops, enable Tools->Options->Debugging->Automatically close the console when debugging stops.
